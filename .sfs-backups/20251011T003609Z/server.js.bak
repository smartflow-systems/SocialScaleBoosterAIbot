const express = require("express"); 
const app = express();
app.get("/health", (_, res) => res.json({ok:true, service:"SocialScaleBoosterAIbot"}));
app.use(require("express").static("public", {extensions: ["html"]}));

// === ROUTE MAP (dev helper) ===
function listRoutes(app) {
  const out = [];
  const walk = (path, layer) => {
    if (layer.route && layer.route.path) {
      const methods = Object.keys(layer.route.methods).map(m => m.toUpperCase());
      out.push({ method: methods.join(','), path: path + layer.route.path });
    } else if (layer.name === 'router' && layer.handle.stack) {
      layer.handle.stack.forEach(s => walk(path + (layer.regexp?.source === '^\\/?$' ? '' : ''), s));
    }
  };
  app._router?.stack?.forEach(l => walk('', l));
  return out;
}
app.get('/__routes', (req, res) => res.json(listRoutes(app)));

// Safer route lister (works across nested routers)
function listAll(app) {
  const out = [];
  (app._router?.stack || []).forEach((l) => {
    if (l.route) {
      const methods = Object.keys(l.route.methods).map(m => m.toUpperCase());
      out.push({ method: methods.join(','), path: l.route.path });
    } else if (l.name === 'router' && l.handle?.stack) {
      l.handle.stack.forEach((s) => {
        if (s.route) {
          const methods = Object.keys(s.route.methods).map(m => m.toUpperCase());
          out.push({ method: methods.join(','), path: s.route.path });
        }
      });
    }
  });
  return out.sort((a,b)=>a.path.localeCompare(b.path));
}
app.get('/__routes', (_req, res) => res.json(listAll(app)));
app.listen(process.env.PORT || 5000, () => console.log("Server up"));